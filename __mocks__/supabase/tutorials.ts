import { initializeSupabaseClient } from "@/helpers/provider";

export const supabase = initializeSupabaseClient();

const mockData = [
  {
    id: 1,
    created_at: "2023-03-09 04:27:32.80487+00",
    tutorial_id: "04132f3c-5275-4b3b-9467-26002a519b6a",
    name: {
      en: "UseEffect Basics",
      es: "Conceptos básicos de useEffect",
    },
    description: {
      en: "In this tutorial, we will learn how to use the useEffect hook in React. We will also learn how to use the useEffect hook to fetch data from an API and display it on the screen.",
      es: "En este tutorial, aprenderemos cómo usar el gancho useEffect en React. También aprenderemos cómo usar el gancho useEffect para obtener datos de una API y mostrarlos en la pantalla.",
    },
    slides: {
      en: '\n  ## What is useEffect?\n  \n  useEffect is a React hook that allows you to perform side effects in function components.\n   It is a close cousin of the componentDidMount, \n   componentDidUpdate, and componentWillUnmount lifecycle methods in class components.\n  \n  ## Why is useEffect useful?\n  \n  useEffect allows you to perform side effects in function components. \n  This means that you can perform data fetching, subscriptions, \n  or manually changing the DOM from React components.\n  \n  ## How do I use useEffect?\n  \n  useEffect takes a function as its first argument. \n  This function is called after the component is rendered for the first time. \n  The function can optionally return a cleanup function, \n  which is called before the component is removed from the DOM.\n  \n  ~~~js\n  useEffect(() => {\n    /* This function is called \n    after the component is rendered \n    for the first time */\n    return () => {\n      /* This function is called \n      before the component is removed \n      from the DOM */\n    };\n  });\n  ~~~\n  \n  %slide\n  \n  ## Understanding useEffect dependencies\n  \n  useEffect can take a second argument, which is an array of values.\n    This array is called the dependencies array.\n    If the dependencies array is empty, the effect will only run once,\n    when the component is first rendered.\n    If the dependencies array contains values, the effect will run every time\n    one of the values in the array changes.\n  \n  ~~~js\n  useEffect(() => {\n    /* This function is called\n    after the component is rendered\n    for the first time */\n    return () => {\n      /* This function is called\n      before the component is removed\n      from the DOM */\n    };\n  }, [/* dependencies array */]);\n  ~~~\n  \n  %slide\n  \n  ## Using useEffect to fetch data\n  \n  useEffect is a great way to fetch data from an API.\n    In this example, we will fetch data from the [JSON Placeholder API](https://jsonplaceholder.typicode.com/).\n    We will use the useEffect hook to fetch data from the API when the component is first rendered.\n    We will also use the useEffect hook to fetch data from the API when the user clicks the button.\n  \n  ~~~js\n  import React, { useState, useEffect } from "react";\n  import axios from "axios";\n  \n  const App = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      axios\n        .get("https://jsonplaceholder.typicode.com/posts")\n        .then((res) => {\n          setData(res.data);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }, []);\n  \n    return (\n      <div>\n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <ul>\n            {data.map((post) => (\n              <li key={post.id}>{post.title}</li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  };\n  \n  export default App;\n  ',
      es: '\n  ## ¿Qué es useEffect?\n  \n  useEffect es un hook de React que le permite realizar efectos secundarios en componentes de función.\n   Es un primo cercano de los métodos de ciclo de vida componentDidMount, \n   componentDidUpdate y componentWillUnmount en componentes de clase.\n  \n  ## ¿Por qué es útil useEffect?\n  \n  useEffect le permite realizar efectos secundarios en componentes de función. \n  Esto significa que puede realizar la recuperación de datos, suscripciones, \n  o cambiar manualmente el DOM desde componentes de React.\n  \n  ## ¿Cómo uso useEffect?\n  \n  useEffect toma una función como su primer argumento. \n  Esta función se llama después de que el componente se renderiza por primera vez. \n  La función puede devolver opcionalmente una función de limpieza, \n  que se llama antes de que el componente se elimine del DOM.\n  \n  ~~~js\n  useEffect(() => {\n    /* Esta función se llama \n    después de que el componente se renderiza \n    por primera vez */\n    return () => {\n      /* Esta función se llama \n      antes de que el componente se elimine del DOM */\n    };\n  });\n  ~~~\n  \n  %slide\n  \n  ## Comprendiendo las dependencias de useEffect\n  \n  useEffect puede tomar un segundo argumento, que es una matriz de valores.\n    Esta matriz se llama matriz de dependencias.\n    Si la matriz de dependencias está vacía, el efecto solo se ejecutará una vez,\n    cuando el componente se renderiza por primera vez.\n    Si la matriz de dependencias contiene valores, el efecto se ejecutará cada vez\n    que uno de los valores en la matriz cambia.\n  \n  ~~~js\n  useEffect(() => {\n    /* Esta función se llama\n    después de que el componente se renderiza\n    por primera vez */\n    return () => {\n      /* Esta función se llama\n      antes de que el componente se elimine del DOM */\n    };\n  }, [/* matriz de dependencias */]);\n ~~~\n  \n  %slide\n  \n  ## Usando useEffect para recuperar datos\n  \n  useEffect es una excelente manera de recuperar datos de una API.\n    En este ejemplo, recuperaremos datos de la [API JSON Placeholder](https://jsonplaceholder.typicode.com/).\n    Usaremos el hook useEffect para recuperar datos de la API cuando se renderiza por primera vez el componente.\n    También usaremos el hook useEffect para recuperar datos de la API cuando el usuario hace clic en el botón.\n  \n  ~~~js\n  import React, { useState, useEffect } from "react";\n  import axios from "axios";\n  \n  const App = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      axios\n        .get("https://jsonplaceholder.typicode.com/posts")\n        .then((res) => {\n          setData(res.data);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }, []);\n  \n    return (\n      <div>\n        {loading ? (\n          <p>Cargando...</p>\n        ) : (\n          <ul>\n            {data.map((post) => (\n              <li key={post.id}>{post.title}</li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  };\n  \n  export default App;\n  ',
    },
    quizzes: {
      en: '\n  {\n      "question": "What is useEffect?",\n      "answers": [\n          "A React hook that allows you to perform side effects in function components",\n          "A React hook that allows you to perform side effects in class components",\n          "A React hook that allows you to perform side effects in both function and class components",\n          "A React hook that allows you to perform side effects in neither function nor class components"\n      ],\n      "correctAnswer": "A React hook that allows you to perform side effects in function components"\n  }\n  \n  %quiz\n  {\n      "question": "What is the first argument of useEffect?",\n      "answers": [\n          "The function that is called after the component is rendered for the first time",\n          "The function that is called before the component is removed from the DOM",\n          "The function that is called after the component is rendered for the first time and before the component is removed from the DOM",\n          "The function that is called after the component is rendered for the first time or before the component is removed from the DOM"\n      ],\n      "correctAnswer": "The function that is called after the component is rendered for the first time"\n  }',
      es: '\n  {\n      "question": "¿Qué es useEffect?",\n      "answers": [\n          "Un hook de React que permite realizar efectos secundarios en componentes funcionales",\n          "Un hook de React que permite realizar efectos secundarios en componentes de clase",\n          "Un hook de React que permite realizar efectos secundarios en componentes funcionales y de clase",\n          "Un hook de React que permite realizar efectos secundarios en componentes ni funcionales ni de clase"\n      ],\n      "correctAnswer": "Un hook de React que permite realizar efectos secundarios en componentes funcionales"\n  }\n  \n  %quiz\n  {\n      "question": "¿Cuál es el primer argumento de useEffect?",\n      "answers": [\n          "La función que se llama después de que el componente se renderiza por primera vez",\n          "La función que se llama antes de que el componente se elimine del DOM",\n          "La función que se llama después de que el componente se renderiza por primera vez y antes de que el componente se elimine del DOM",\n          "La función que se llama después de que el componente se renderiza por primera vez o antes de que el componente se elimine del DOM"\n      ],\n      "correctAnswer": "La función que se llama después de que el componente se renderiza por primera vez"\n  }',
    },
    difficulty: 1,
    points: 200,
    tags: ["react", "hooks", "javascript"],
  },
];

export const mockTable = () => {
  return {
    select: jest.fn().mockImplementation(() => {
      return { data: mockData };
    }),
  };
};

supabase.from = jest.fn().mockImplementation(() => {
  return mockTable();
});
